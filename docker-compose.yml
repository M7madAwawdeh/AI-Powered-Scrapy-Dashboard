version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_scrapy_postgres
    environment:
      POSTGRES_DB: ai_scrapy_dashboard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ai_scrapy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_scrapy_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ai_scrapy_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_scrapy_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_scrapy_app
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ai_scrapy_dashboard
      DB_USER: postgres
      DB_PASSWORD: postgres_password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # OpenRouter API Configuration
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-your_api_key_here}
      OPENROUTER_MODEL: ${OPENROUTER_MODEL:-anthropic/claude-3.5-sonnet}
      
      # Scraping Configuration
      SCRAPING_DELAY: ${SCRAPING_DELAY:-2}
      SCRAPING_TIMEOUT: ${SCRAPING_TIMEOUT:-30}
      SCRAPING_RETRY_TIMES: ${SCRAPING_RETRY_TIMES:-3}
      
      # Dashboard Configuration
      DASHBOARD_PORT: 8501
      DASHBOARD_HOST: 0.0.0.0
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: logs/scrapy_dashboard.log
      
      # Development Settings
      DEBUG: ${DEBUG:-False}
      ENVIRONMENT: ${ENVIRONMENT:-production}
    volumes:
      - ./logs:/app/logs
      - ./exports:/app/exports
      - ./httpcache:/app/httpcache
      - ./.env:/app/.env:ro
    ports:
      - "8501:8501"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_scrapy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ai_scrapy_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - ai_scrapy_network
    restart: unless-stopped
    profiles:
      - production

  # Celery Worker for Background Tasks (Optional)
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_scrapy_celery_worker
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ai_scrapy_dashboard
      DB_USER: postgres
      DB_PASSWORD: postgres_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-your_api_key_here}
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_scrapy_network
    restart: unless-stopped
    command: ["celery", "-A", "ai_scrapy_dashboard.celery_app", "worker", "--loglevel=info"]
    profiles:
      - production

  # Celery Beat Scheduler (Optional)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_scrapy_celery_beat
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ai_scrapy_dashboard
      DB_USER: postgres
      DB_PASSWORD: postgres_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_scrapy_network
    restart: unless-stopped
    command: ["celery", "-A", "ai_scrapy_dashboard.celery_app", "beat", "--loglevel=info"]
    profiles:
      - production

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_scrapy_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai_scrapy_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai_scrapy_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - ai_scrapy_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai_scrapy_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 